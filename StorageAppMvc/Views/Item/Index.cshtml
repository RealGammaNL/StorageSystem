@{
    ViewData["Title"] = "Index";
}

@using Domain
@model ItemViewModel

@if (!string.IsNullOrEmpty(Context.Request.Query["errorMessage"]))
{
    <div class="alert alert-danger error-message-nav">
        @Context.Request.Query["errorMessage"]
    </div>
}

<h1 class="Item-Header">Create new Items or Containers</h1>

@if (Model.Containers.Count() == 0)
{
    <div class="alert alert-danger" role="alert">
        You haven't created any containers yet, create some to be able to use the STORAGE page.
    </div>
}
else {
    <p class="Home-p">Selecting an item and a container will link them together. <i class="fa-solid fa-up-down-left-right fa-sm"></i></p>
    <p class="Home-p">Removing a container with items in it will unlink the items automatically!</p>
}



@**@
@* Hidden Forms, this is my chosen (un-official) method for communicating between Javascript and C# MVC controllers*@
@**@


<form method="post" class="Hidden-Forms" action="@Url.Action("AddItemToContainer", "Item")">
    @*AddItemToContainer is the method in the Item controller*@
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="number" id="ContainerId" name="ContainerId" />
    <input type="number" id="ItemId" name="ItemId" />@*ItemId is the parameter in the AddItemToContainer method in ItemController*@
    <input type="submit" id="ItemAddToContainerSubmit" /> @*submit is the input type, it makes sure this form gets posted to the ItemController*@
</form>

<form method="post" class="Hidden-Forms" action="@Url.Action("Delete", "Item")">
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="number" id="ItemIdDelete" name="id" />
    <input type="submit" id="ItemDelete" />
</form>

<form method="post" class="Hidden-Forms" action="@Url.Action("Delete", "Container")">
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="number" id="ContainerIdDelete" name="id" />
    <input type="submit" id="ContainerDelete" />
</form>

<form method="post" class="Hidden-Forms" action="@Url.Action("Edit", "Item")">
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="text" id="EditItemName" name="Name" />
    <input type="text" id="EditItemDesc" name="Desc" />
    <input type="number" id="EditItemId" name="id" />
    <input type="submit" id="EditItem" />
</form>

<form method="post" class="Hidden-Forms" action="@Url.Action("Edit", "Container")">
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="text" id="EditContainerName" name="Name" />
    <input type="text" id="EditContainerDesc" name="Desc" />
    <input type="number" id="EditContainerId" name="id" />
    <input type="submit" id="EditContainer" />
</form>

<form class="Hidden-Forms" action="@Url.Action("Index", "Item")">
    <input type="hidden" name="RoomId" value="@Model.RoomId" />
    <input type="submit" id="ReloadPage" />
</form>


<!-- HTML COMMENT OLD ITEM CREATE SYSTEM
@* <div class="Item-Information">
    @* <form method="post" action="@Url.Action("CreateItem", "Item")" name="ItemPostForm"> *@
    <form asp-action="CreateItem">
        <div class="Item-Information-Fields">
            <div class="Item-Information-Fields-Item">
                <label for="ItemName">Itemname:</label>
                <input type="text" id="Name" name="Iname" /> <br><br>
            </div>
            <div class="Item-Information-Fields-Desc">
                <label for="Description">Description:</label>
                <input type="text" id="Desc" name="Desc" /> <br><br>
            </div>
            <input class="ItemAddSubmit" type="submit" value="Submit" id="ItemAddSubmit" />
        </div>
    </form>
</div> -->



<br><br>

<div class="Items-Containers">
    <div class="Items">
        <div class="Small-Item-Header">
            <div><label>Items!</label></div>
            <div>Create Item&#160<button class="Icon-Button"><i class="fa-solid fa-plus" onclick="document.getElementById('NewItem').style.display = 'inline'"></i></button></div>
        </div>

        <form asp-action="CreateItem" class="Hidden-Forms" id="NewItem">
            <div class="Item-Line">
                <div class="Items-Above">
                    <div class="Item-Left">
                        <div class="Item-Name" id="Item-Line-Item-Name-1"><input id="itemNameInput-1" name="Name" type="text" placeholder="Enter Name:"></div>
                        <div>:</div>
                        <div class="Item-Desc" id="Item-Line-Item-Desc-1"><input id="itemDescInput-1" name="Desc" type="text" placeholder="Enter Description:"></div>
                    </div>
                </div>
                <div class="Icons-Under">
                    <div class="Item-Edit-Confirm" id="itemEditConfirm-1" style="display: inline;">
                        <i style="font-weight: bold;">Add? :&nbsp;</i>
                        <input type="hidden" name="RoomId" value="@Model.RoomId" />
                        <button type="submit" class="Icon-Button"><i class="fa-solid fa-check fa-lg" id="itemEditCheck-1"></i></button>
                        <button type="reset" class="Icon-Button"><i class="fa-solid fa-xmark fa-lg" id="itemEditCancel-1" onclick="document.getElementById('NewItem').style.display = 'none'"></i></button>
                    </div>
                </div>
            </div>
        </form>

        @foreach (Item i in Model.UnAssignedItems)
        {
           
            <div class="Item-Line" id="@i.Id" onclick="selectItem(this)">
                <div class ="Items-Above">
                    <div class="Item-Left">
                        <div class="Item-Name" id="Item-Line-Item-Name-@i.Id">@i.Name</div>
                        <div>:</div>
                        <div class="Item-Desc" id="Item-Line-Item-Desc-@i.Id">@i.Description</div>
                    </div>
                    <div class="Item-Right">
                        <div class="Item-Container">Container :&#160</div> @*&#160 is a space character*@
                        <div class="Item-Container-Number">@i.ContainerId</div>
                    </div>
                </div>
                <div class="Icons-Under">
                    <img src="~/images/pencil-icon.png" onclick="EditClick('item', @i.Id)" id="ItemEditImg-@i.Id">
                    <img src="~/images/trashcan-icon.png" onclick="DeleteClick('item', @i.Id)" id="ItemDeleteImg-@i.Id">

                    <div class="Item-Edit-Confirm" id="itemEditConfirm-@i.Id">
                        <i style="font-weight: bold;">Confirm edit? :&#160</i>
                        <i class="fa-solid fa-check fa-lg" id="itemEditCheck-@i.Id" onclick="EditConfirm('confirm', 'item', @i.Id)"></i>
                        <i class="fa-solid fa-xmark fa-lg" id="itemEditCancel-@i.Id" onclick="EditConfirm('cancel', 'item', @i.Id)"></i>
                    </div>

                    <div class ="Item-Delete-Confirm" id="itemDeleteConfirm-@i.Id">
                        <i style="font-weight: bold;">Confirm delete? :&#160</i>
                        <i class="fa-solid fa-check fa-lg" id="itemDeleteCheck-@i.Id" onclick="DeleteConfirm('confirm', 'item', @i.Id)"></i>
                        <i class="fa-solid fa-xmark fa-lg" id="itemDeleteCancel-@i.Id" onclick="DeleteConfirm('cancel', 'item', @i.Id)"></i>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="Containers">
        <div class="Small-Item-Header">
            <div><label>Containers!</label></div>
            <div>Create Container&#160<button class="Icon-Button"><i class="fa-solid fa-plus" onclick="document.getElementById('NewContainer').style.display = 'inline'"></i></button></div>
        </div>

        <form asp-controller="Container" asp-action="CreateContainer" class="Hidden-Forms" id="NewContainer">
            <div class="Container-Line">
                <div class="Items-Above">
                    <div class="Container-Label">
                        <div class="Container-Left">
                            <div class="Container-Name" id="Container-Line-Container-Name-1"><input id="containerNameInput-1" name="Name" type="text" placeholder="Enter Name:"></div>
                            <div class="Container-Desc" id="Container-Line-Container-Desc-1"><input id="containerDescInput-1" name="Desc" type="text" placeholder="Enter Description:"></div>
                        </div>
                    
                        <div class="Container-Right">
                            <div class="Container-Edit-Confirm" id="containerEditConfirm-1" style="display: inline;">
                                <i style="font-weight: bold;">Add? :&nbsp;</i>
                                <input class="hidden" name="RoomId" id="RoomId" value="@Model.RoomId" />
                                <button type="submit" class="Icon-Button"><i class="fa-solid fa-check fa-lg" id="containerEditCheck-1"></i></button>
                                <button type="reset" class="Icon-Button"><i class="fa-solid fa-xmark fa-lg" id="containerEditCancel-1" onclick="document.getElementById('NewContainer').style.display = 'none'"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        @foreach (Container c in Model.Containers)
        {
            <div class="Container-Line" id="@c.Id" onclick="selectContainer(this)">
                <div class="Items-Above">
                    <div class="Container-Label">
                        <div>C<span>@c.Id</span>:&#160</div>
                        <div class="Container-Name" id="Container-Line-Container-Name-@c.Id">@c.Name</div>
                        <div class="Container-Right">
                            @* <div class="Container-Room">R :&#160</div> *@
                            @* <div class="Container-Room-Number">@c.RoomId</div> *@
                            <img src="~/images/pencil-icon.png" onclick="EditClick('container', @c.Id)" id="ContainerEditImg-@c.Id">
                            <img src="~/images/trashcan-icon.png" onclick="DeleteClick('container', @c.Id)" id="ContainerDeleteImg-@c.Id">

                            <div class="Container-Edit-Confirm" id="containerEditConfirm-@c.Id">
                                <i style="font-weight: bold;">Confirm edit? :&#160</i>
                                <i class="fa-solid fa-check fa-lg" id="containerEditCheck-@c.Id" onclick="EditConfirm('confirm', 'container' , @c.Id)"></i>
                                <i class="fa-solid fa-xmark fa-lg" id="containerEditCancel-@c.Id" onclick="EditConfirm('cancel', 'container' , @c.Id)"></i>
                            </div>

                            <div class="Container-Delete-Confirm" id="containerDeleteConfirm-@c.Id">
                                <i style="font-weight: bold;">Confirm delete? :&#160</i>
                                <i class="fa-solid fa-check fa-lg" id="containerDeleteCheck-@c.Id" onclick="DeleteConfirm('confirm', 'container', @c.Id)"></i>
                                <i class="fa-solid fa-xmark fa-lg" id="containerDeleteCancel-@c.Id" onclick="DeleteConfirm('cancel', 'container', @c.Id)"></i>
                            </div>
                        </div>
                    </div>
                    <div class="Container-Desc" id="Container-Line-Container-Desc-@c.Id">@c.Description</div>
                </div>
            </div>
        }
    </div>
</div>


<script>
    let selectedContainer = null; // Variable to keep track of the selected container
    let selectedItem = null; // Variable to keep track of the selected container

    //
    // Adding items to containers
    //
    function selectContainer(c) {
        if (selectedContainer !== null) {
            selectedContainer.classList.remove("SelectedContainer"); // Remove the class from the previously selected container
            document.getElementById('ContainerId').value = ""
        }

        if (c !== selectedContainer) {
            c.classList.add("SelectedContainer"); // Add the class to the newly selected container
            selectedContainer = c; // Update the selected container reference
            document.getElementById('ContainerId').value = c.id
            AddItem()

        } else {
            document.getElementById('ContainerId').value = ""
            selectedContainer = null; // Clicking the same container again deselects it
        }
    }

    function selectItem(i) {
        if (selectedItem !== null) {
            selectedItem.classList.remove("SelectedItem"); // Remove the class from the previously selected container
            document.getElementById('ItemId').value = ""
        }

        if (i !== selectedItem) {
            i.classList.add("SelectedItem"); // Add the class to the newly selected container
            selectedItem = i; // Update the selected container reference
            document.getElementById('ItemId').value = i.id
            AddItem()

        } else {
            document.getElementById('ItemId').value = ""
            selectedItem = null; // Clicking the same container again deselects it
        }
    }

    function AddItem() {
        if (document.getElementById('ItemId').value !== "" && document.getElementById('ContainerId').value !== "") { 
            document.getElementById('ItemAddToContainerSubmit').click()
        }
    }

    //
    // Pressing the delete icon on an item or container
    //

    // function DeleteItemClick(i) {
    //     var inputString = i.id
    //     var parts = inputString.split('-');
    //     var stringNumber = parts[1];

    //     i.style.display = "none";
    //     document.getElementById("ItemEditImg-" + stringNumber).style.display = "none";

    //     document.getElementById("itemDeleteConfirm-" + stringNumber).style.display = "inline";
    // }

    // function DeleteContainerClick(c) {
    //     var inputString = c.id
    //     var parts = inputString.split('-');
    //     var stringNumber = parts[1];

    //     c.style.display = "none";
    //     document.getElementById("ContainerEditImg-" + stringNumber).style.display = "none";

    //     document.getElementById("containerDeleteConfirm-" + stringNumber).style.display = "inline";
    // }

    // The comments above have been replaced by this function.
    // This function HIDES the edit and remove icon and replaces it for a checkmark and a cancel icon.

    function DeleteClick(entity, id) {
        // entity being: the user clicked on either an item or a container.
        // id being: the id of the item the user clicked on.

        if (entity === 'item') {
            document.getElementById("ItemEditImg-" + id).style.display = "none";
            document.getElementById("ItemDeleteImg-" + id).style.display = "none";
            document.getElementById("itemDeleteConfirm-" + id).style.display = "inline";
            return;
        }

        if (entity === 'container') {
            document.getElementById("ContainerEditImg-" + id).style.display = "none";
            document.getElementById("ContainerDeleteImg-" + id).style.display = "none";
            document.getElementById("containerDeleteConfirm-" + id).style.display = "inline";
            return;
        }
    }

    function DeleteConfirm(action, entity, id) {
        if (entity === "item") {
            if (action === "confirm") {
                document.getElementById('ItemIdDelete').value = id
                document.getElementById('ItemDelete').click()
            }

            if (action === "cancel") { document.getElementById('ReloadPage').click() }
            return;
        }

        if (entity === "container") {
            if (action === "confirm") {
                document.getElementById('ContainerIdDelete').value = id
                document.getElementById('ContainerDelete').click()
            }

            if (action === "cancel") { document.getElementById('ReloadPage').click() }
            return;
        }
    }

    function EditClick(entity, id) {
        if (entity === 'item')
        {
            // Hide the edit and delete icon and replace for checkmark and cancel icon
            document.getElementById("ItemEditImg-" + id).style.display = "none";
            document.getElementById("ItemDeleteImg-" + id).style.display = "none";
            document.getElementById("itemEditConfirm-" + id).style.display = "inline";


            // Find the element on Item-Line that contains the name, same for description
            var itemNameElement = document.getElementById('Item-Line-Item-Name-' + id)
            var itemDescElement = document.getElementById('Item-Line-Item-Desc-' + id)

            // Find the text in the element for name, same for description
            var itemNameText = itemNameElement.textContent.trim();
            var itemDescText = itemDescElement.textContent.trim();

            // Create one input per element we want to make edit-able
            var itemNameInput = document.createElement("input");
            var itemDescInput = document.createElement("input");

            // Make them unique
            itemNameInput.id = "itemNameInput-" + id;
            itemDescInput.id = "itemDescInput-" + id;

            // Set the input to the same text as the element it was just created out of.
            itemNameInput.type = "text";
            itemNameInput.value = itemNameText;

            // Put the input over the div.
            itemNameElement.innerHTML = "";
            itemNameElement.appendChild(itemNameInput);

            // Same for description
            itemDescInput.type = "text";
            itemDescInput.value = itemDescText;

            itemDescElement.innerHTML = "";
            itemDescElement.appendChild(itemDescInput);
            return;
        }

        // Same for container
        if (entity === 'container') {
            document.getElementById("ContainerEditImg-" + id).style.display = "none";
            document.getElementById("ContainerDeleteImg-" + id).style.display = "none";
            document.getElementById("containerEditConfirm-" + id).style.display = "inline";

            var containerNameElement = document.getElementById('Container-Line-Container-Name-' + id)
            var containerDescElement = document.getElementById('Container-Line-Container-Desc-' + id)

            var containerNameText = containerNameElement.textContent.trim();
            var containerDescText = containerDescElement.textContent.trim();

            var containerNameInput = document.createElement("input");
            var containerDescInput = document.createElement("input");

            containerNameInput.id = "containerNameInput-" + id;
            containerDescInput.id = "containerDescInput-" + id;

            containerNameInput.type = "text";
            containerNameInput.value = containerNameText;

            containerNameElement.innerHTML = "";
            containerNameElement.appendChild(containerNameInput);

            containerDescInput.type = "text";
            containerDescInput.value = containerDescText;

            containerDescElement.innerHTML = "";
            containerDescElement.appendChild(containerDescInput);
            return;
        }
    }

    function EditConfirm(action, entity, id) {
        if (entity === "item") 
        {
            if (action === "confirm") 
            {
                document.getElementById('EditItemName').value = document.getElementById('itemNameInput-' + id).value
                document.getElementById('EditItemDesc').value = document.getElementById('itemDescInput-' + id).value
                document.getElementById('EditItemId').value = id
                document.getElementById('EditItem').click()
            }

            if (action === "cancel") { document.getElementById('ReloadPage').click() }
            return;
        }

        if (entity === "container") 
        {
            if (action === "confirm") 
            {
                document.getElementById('EditContainerName').value = document.getElementById('containerNameInput-' + id).value
                document.getElementById('EditContainerDesc').value = document.getElementById('containerDescInput-' + id).value
                document.getElementById('EditContainerId').value = id
                document.getElementById('EditContainer').click()
            }

            if (action === "cancel") { document.getElementById('ReloadPage').click() }
            return;
        }
    }

    // function ShowNewItem() 
    // {
    //     window.alert( "ik kom hier")
    //     document.getElementById('NewItem').style.display = "inline"
    // }
</script>




   